/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package common;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-02-10")
public class Interface {

  public interface Iface {

    /**
     * 企业实际控制人信息
     * entName 企业名称
     * uscCode 社会信用代码
     * 
     * @param entName
     * @param uscCode
     */
    public java.lang.String getEntActualContoller(java.lang.String entName, java.lang.String uscCode) throws AuditException, org.apache.thrift.TException;

    /**
     * 企业图谱查询
     * keyword 关键字
     * attIds 过滤关系
     * level 层级，最大3层
     * nodeType 节点类型
     * 
     * @param keyword
     * @param attIds
     * @param level
     * @param nodeType
     */
    public java.lang.String getEntGraphG(java.lang.String keyword, java.lang.String attIds, java.lang.String level, java.lang.String nodeType) throws AuditException, org.apache.thrift.TException;

    /**
     * 企业关联探寻
     * entName 企业名称
     * attIds 过滤关系
     * level 层级，最大6层
     * 
     * @param entName
     * @param attIds
     * @param level
     */
    public java.lang.String getEntsRelevanceSeekGraphG(java.lang.String entName, java.lang.String attIds, java.lang.String level) throws AuditException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getEntActualContoller(java.lang.String entName, java.lang.String uscCode, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getEntGraphG(java.lang.String keyword, java.lang.String attIds, java.lang.String level, java.lang.String nodeType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getEntsRelevanceSeekGraphG(java.lang.String entName, java.lang.String attIds, java.lang.String level, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String getEntActualContoller(java.lang.String entName, java.lang.String uscCode) throws AuditException, org.apache.thrift.TException
    {
      send_getEntActualContoller(entName, uscCode);
      return recv_getEntActualContoller();
    }

    public void send_getEntActualContoller(java.lang.String entName, java.lang.String uscCode) throws org.apache.thrift.TException
    {
      getEntActualContoller_args args = new getEntActualContoller_args();
      args.setEntName(entName);
      args.setUscCode(uscCode);
      sendBase("getEntActualContoller", args);
    }

    public java.lang.String recv_getEntActualContoller() throws AuditException, org.apache.thrift.TException
    {
      getEntActualContoller_result result = new getEntActualContoller_result();
      receiveBase(result, "getEntActualContoller");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntActualContoller failed: unknown result");
    }

    public java.lang.String getEntGraphG(java.lang.String keyword, java.lang.String attIds, java.lang.String level, java.lang.String nodeType) throws AuditException, org.apache.thrift.TException
    {
      send_getEntGraphG(keyword, attIds, level, nodeType);
      return recv_getEntGraphG();
    }

    public void send_getEntGraphG(java.lang.String keyword, java.lang.String attIds, java.lang.String level, java.lang.String nodeType) throws org.apache.thrift.TException
    {
      getEntGraphG_args args = new getEntGraphG_args();
      args.setKeyword(keyword);
      args.setAttIds(attIds);
      args.setLevel(level);
      args.setNodeType(nodeType);
      sendBase("getEntGraphG", args);
    }

    public java.lang.String recv_getEntGraphG() throws AuditException, org.apache.thrift.TException
    {
      getEntGraphG_result result = new getEntGraphG_result();
      receiveBase(result, "getEntGraphG");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntGraphG failed: unknown result");
    }

    public java.lang.String getEntsRelevanceSeekGraphG(java.lang.String entName, java.lang.String attIds, java.lang.String level) throws AuditException, org.apache.thrift.TException
    {
      send_getEntsRelevanceSeekGraphG(entName, attIds, level);
      return recv_getEntsRelevanceSeekGraphG();
    }

    public void send_getEntsRelevanceSeekGraphG(java.lang.String entName, java.lang.String attIds, java.lang.String level) throws org.apache.thrift.TException
    {
      getEntsRelevanceSeekGraphG_args args = new getEntsRelevanceSeekGraphG_args();
      args.setEntName(entName);
      args.setAttIds(attIds);
      args.setLevel(level);
      sendBase("getEntsRelevanceSeekGraphG", args);
    }

    public java.lang.String recv_getEntsRelevanceSeekGraphG() throws AuditException, org.apache.thrift.TException
    {
      getEntsRelevanceSeekGraphG_result result = new getEntsRelevanceSeekGraphG_result();
      receiveBase(result, "getEntsRelevanceSeekGraphG");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntsRelevanceSeekGraphG failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getEntActualContoller(java.lang.String entName, java.lang.String uscCode, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntActualContoller_call method_call = new getEntActualContoller_call(entName, uscCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntActualContoller_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String entName;
      private java.lang.String uscCode;
      public getEntActualContoller_call(java.lang.String entName, java.lang.String uscCode, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entName = entName;
        this.uscCode = uscCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntActualContoller", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntActualContoller_args args = new getEntActualContoller_args();
        args.setEntName(entName);
        args.setUscCode(uscCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws AuditException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntActualContoller();
      }
    }

    public void getEntGraphG(java.lang.String keyword, java.lang.String attIds, java.lang.String level, java.lang.String nodeType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntGraphG_call method_call = new getEntGraphG_call(keyword, attIds, level, nodeType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntGraphG_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String keyword;
      private java.lang.String attIds;
      private java.lang.String level;
      private java.lang.String nodeType;
      public getEntGraphG_call(java.lang.String keyword, java.lang.String attIds, java.lang.String level, java.lang.String nodeType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyword = keyword;
        this.attIds = attIds;
        this.level = level;
        this.nodeType = nodeType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntGraphG", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntGraphG_args args = new getEntGraphG_args();
        args.setKeyword(keyword);
        args.setAttIds(attIds);
        args.setLevel(level);
        args.setNodeType(nodeType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws AuditException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntGraphG();
      }
    }

    public void getEntsRelevanceSeekGraphG(java.lang.String entName, java.lang.String attIds, java.lang.String level, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntsRelevanceSeekGraphG_call method_call = new getEntsRelevanceSeekGraphG_call(entName, attIds, level, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntsRelevanceSeekGraphG_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String entName;
      private java.lang.String attIds;
      private java.lang.String level;
      public getEntsRelevanceSeekGraphG_call(java.lang.String entName, java.lang.String attIds, java.lang.String level, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entName = entName;
        this.attIds = attIds;
        this.level = level;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntsRelevanceSeekGraphG", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntsRelevanceSeekGraphG_args args = new getEntsRelevanceSeekGraphG_args();
        args.setEntName(entName);
        args.setAttIds(attIds);
        args.setLevel(level);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws AuditException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntsRelevanceSeekGraphG();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getEntActualContoller", new getEntActualContoller());
      processMap.put("getEntGraphG", new getEntGraphG());
      processMap.put("getEntsRelevanceSeekGraphG", new getEntsRelevanceSeekGraphG());
      return processMap;
    }

    public static class getEntActualContoller<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntActualContoller_args> {
      public getEntActualContoller() {
        super("getEntActualContoller");
      }

      public getEntActualContoller_args getEmptyArgsInstance() {
        return new getEntActualContoller_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getEntActualContoller_result getResult(I iface, getEntActualContoller_args args) throws org.apache.thrift.TException {
        getEntActualContoller_result result = new getEntActualContoller_result();
        try {
          result.success = iface.getEntActualContoller(args.entName, args.uscCode);
        } catch (AuditException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getEntGraphG<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntGraphG_args> {
      public getEntGraphG() {
        super("getEntGraphG");
      }

      public getEntGraphG_args getEmptyArgsInstance() {
        return new getEntGraphG_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getEntGraphG_result getResult(I iface, getEntGraphG_args args) throws org.apache.thrift.TException {
        getEntGraphG_result result = new getEntGraphG_result();
        try {
          result.success = iface.getEntGraphG(args.keyword, args.attIds, args.level, args.nodeType);
        } catch (AuditException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getEntsRelevanceSeekGraphG<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntsRelevanceSeekGraphG_args> {
      public getEntsRelevanceSeekGraphG() {
        super("getEntsRelevanceSeekGraphG");
      }

      public getEntsRelevanceSeekGraphG_args getEmptyArgsInstance() {
        return new getEntsRelevanceSeekGraphG_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getEntsRelevanceSeekGraphG_result getResult(I iface, getEntsRelevanceSeekGraphG_args args) throws org.apache.thrift.TException {
        getEntsRelevanceSeekGraphG_result result = new getEntsRelevanceSeekGraphG_result();
        try {
          result.success = iface.getEntsRelevanceSeekGraphG(args.entName, args.attIds, args.level);
        } catch (AuditException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getEntActualContoller", new getEntActualContoller());
      processMap.put("getEntGraphG", new getEntGraphG());
      processMap.put("getEntsRelevanceSeekGraphG", new getEntsRelevanceSeekGraphG());
      return processMap;
    }

    public static class getEntActualContoller<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntActualContoller_args, java.lang.String> {
      public getEntActualContoller() {
        super("getEntActualContoller");
      }

      public getEntActualContoller_args getEmptyArgsInstance() {
        return new getEntActualContoller_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getEntActualContoller_result result = new getEntActualContoller_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getEntActualContoller_result result = new getEntActualContoller_result();
            if (e instanceof AuditException) {
              result.e = (AuditException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntActualContoller_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getEntActualContoller(args.entName, args.uscCode,resultHandler);
      }
    }

    public static class getEntGraphG<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntGraphG_args, java.lang.String> {
      public getEntGraphG() {
        super("getEntGraphG");
      }

      public getEntGraphG_args getEmptyArgsInstance() {
        return new getEntGraphG_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getEntGraphG_result result = new getEntGraphG_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getEntGraphG_result result = new getEntGraphG_result();
            if (e instanceof AuditException) {
              result.e = (AuditException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntGraphG_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getEntGraphG(args.keyword, args.attIds, args.level, args.nodeType,resultHandler);
      }
    }

    public static class getEntsRelevanceSeekGraphG<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntsRelevanceSeekGraphG_args, java.lang.String> {
      public getEntsRelevanceSeekGraphG() {
        super("getEntsRelevanceSeekGraphG");
      }

      public getEntsRelevanceSeekGraphG_args getEmptyArgsInstance() {
        return new getEntsRelevanceSeekGraphG_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getEntsRelevanceSeekGraphG_result result = new getEntsRelevanceSeekGraphG_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getEntsRelevanceSeekGraphG_result result = new getEntsRelevanceSeekGraphG_result();
            if (e instanceof AuditException) {
              result.e = (AuditException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntsRelevanceSeekGraphG_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getEntsRelevanceSeekGraphG(args.entName, args.attIds, args.level,resultHandler);
      }
    }

  }

  public static class getEntActualContoller_args implements org.apache.thrift.TBase<getEntActualContoller_args, getEntActualContoller_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntActualContoller_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntActualContoller_args");

    private static final org.apache.thrift.protocol.TField ENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("entName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("uscCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEntActualContoller_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEntActualContoller_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String entName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String uscCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENT_NAME((short)1, "entName"),
      USC_CODE((short)2, "uscCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENT_NAME
            return ENT_NAME;
          case 2: // USC_CODE
            return USC_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("entName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USC_CODE, new org.apache.thrift.meta_data.FieldMetaData("uscCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntActualContoller_args.class, metaDataMap);
    }

    public getEntActualContoller_args() {
    }

    public getEntActualContoller_args(
      java.lang.String entName,
      java.lang.String uscCode)
    {
      this();
      this.entName = entName;
      this.uscCode = uscCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntActualContoller_args(getEntActualContoller_args other) {
      if (other.isSetEntName()) {
        this.entName = other.entName;
      }
      if (other.isSetUscCode()) {
        this.uscCode = other.uscCode;
      }
    }

    public getEntActualContoller_args deepCopy() {
      return new getEntActualContoller_args(this);
    }

    @Override
    public void clear() {
      this.entName = null;
      this.uscCode = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEntName() {
      return this.entName;
    }

    public getEntActualContoller_args setEntName(@org.apache.thrift.annotation.Nullable java.lang.String entName) {
      this.entName = entName;
      return this;
    }

    public void unsetEntName() {
      this.entName = null;
    }

    /** Returns true if field entName is set (has been assigned a value) and false otherwise */
    public boolean isSetEntName() {
      return this.entName != null;
    }

    public void setEntNameIsSet(boolean value) {
      if (!value) {
        this.entName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUscCode() {
      return this.uscCode;
    }

    public getEntActualContoller_args setUscCode(@org.apache.thrift.annotation.Nullable java.lang.String uscCode) {
      this.uscCode = uscCode;
      return this;
    }

    public void unsetUscCode() {
      this.uscCode = null;
    }

    /** Returns true if field uscCode is set (has been assigned a value) and false otherwise */
    public boolean isSetUscCode() {
      return this.uscCode != null;
    }

    public void setUscCodeIsSet(boolean value) {
      if (!value) {
        this.uscCode = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ENT_NAME:
        if (value == null) {
          unsetEntName();
        } else {
          setEntName((java.lang.String)value);
        }
        break;

      case USC_CODE:
        if (value == null) {
          unsetUscCode();
        } else {
          setUscCode((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ENT_NAME:
        return getEntName();

      case USC_CODE:
        return getUscCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ENT_NAME:
        return isSetEntName();
      case USC_CODE:
        return isSetUscCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntActualContoller_args)
        return this.equals((getEntActualContoller_args)that);
      return false;
    }

    public boolean equals(getEntActualContoller_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_entName = true && this.isSetEntName();
      boolean that_present_entName = true && that.isSetEntName();
      if (this_present_entName || that_present_entName) {
        if (!(this_present_entName && that_present_entName))
          return false;
        if (!this.entName.equals(that.entName))
          return false;
      }

      boolean this_present_uscCode = true && this.isSetUscCode();
      boolean that_present_uscCode = true && that.isSetUscCode();
      if (this_present_uscCode || that_present_uscCode) {
        if (!(this_present_uscCode && that_present_uscCode))
          return false;
        if (!this.uscCode.equals(that.uscCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEntName()) ? 131071 : 524287);
      if (isSetEntName())
        hashCode = hashCode * 8191 + entName.hashCode();

      hashCode = hashCode * 8191 + ((isSetUscCode()) ? 131071 : 524287);
      if (isSetUscCode())
        hashCode = hashCode * 8191 + uscCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEntActualContoller_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEntName()).compareTo(other.isSetEntName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entName, other.entName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUscCode()).compareTo(other.isSetUscCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUscCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uscCode, other.uscCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEntActualContoller_args(");
      boolean first = true;

      sb.append("entName:");
      if (this.entName == null) {
        sb.append("null");
      } else {
        sb.append(this.entName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uscCode:");
      if (this.uscCode == null) {
        sb.append("null");
      } else {
        sb.append(this.uscCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (entName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'entName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntActualContoller_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntActualContoller_argsStandardScheme getScheme() {
        return new getEntActualContoller_argsStandardScheme();
      }
    }

    private static class getEntActualContoller_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEntActualContoller_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntActualContoller_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entName = iprot.readString();
                struct.setEntNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USC_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uscCode = iprot.readString();
                struct.setUscCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntActualContoller_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entName != null) {
          oprot.writeFieldBegin(ENT_NAME_FIELD_DESC);
          oprot.writeString(struct.entName);
          oprot.writeFieldEnd();
        }
        if (struct.uscCode != null) {
          oprot.writeFieldBegin(USC_CODE_FIELD_DESC);
          oprot.writeString(struct.uscCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntActualContoller_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntActualContoller_argsTupleScheme getScheme() {
        return new getEntActualContoller_argsTupleScheme();
      }
    }

    private static class getEntActualContoller_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEntActualContoller_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntActualContoller_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.entName);
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUscCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUscCode()) {
          oprot.writeString(struct.uscCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntActualContoller_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.entName = iprot.readString();
        struct.setEntNameIsSet(true);
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uscCode = iprot.readString();
          struct.setUscCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEntActualContoller_result implements org.apache.thrift.TBase<getEntActualContoller_result, getEntActualContoller_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntActualContoller_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntActualContoller_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEntActualContoller_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEntActualContoller_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable AuditException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuditException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntActualContoller_result.class, metaDataMap);
    }

    public getEntActualContoller_result() {
    }

    public getEntActualContoller_result(
      java.lang.String success,
      AuditException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntActualContoller_result(getEntActualContoller_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new AuditException(other.e);
      }
    }

    public getEntActualContoller_result deepCopy() {
      return new getEntActualContoller_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getEntActualContoller_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public AuditException getE() {
      return this.e;
    }

    public getEntActualContoller_result setE(@org.apache.thrift.annotation.Nullable AuditException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((AuditException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntActualContoller_result)
        return this.equals((getEntActualContoller_result)that);
      return false;
    }

    public boolean equals(getEntActualContoller_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEntActualContoller_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEntActualContoller_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntActualContoller_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntActualContoller_resultStandardScheme getScheme() {
        return new getEntActualContoller_resultStandardScheme();
      }
    }

    private static class getEntActualContoller_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEntActualContoller_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntActualContoller_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new AuditException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntActualContoller_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntActualContoller_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntActualContoller_resultTupleScheme getScheme() {
        return new getEntActualContoller_resultTupleScheme();
      }
    }

    private static class getEntActualContoller_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEntActualContoller_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntActualContoller_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntActualContoller_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new AuditException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEntGraphG_args implements org.apache.thrift.TBase<getEntGraphG_args, getEntGraphG_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntGraphG_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntGraphG_args");

    private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("attIds", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEntGraphG_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEntGraphG_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String keyword; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String attIds; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String level; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String nodeType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYWORD((short)1, "keyword"),
      ATT_IDS((short)2, "attIds"),
      LEVEL((short)3, "level"),
      NODE_TYPE((short)4, "nodeType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYWORD
            return KEYWORD;
          case 2: // ATT_IDS
            return ATT_IDS;
          case 3: // LEVEL
            return LEVEL;
          case 4: // NODE_TYPE
            return NODE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATT_IDS, new org.apache.thrift.meta_data.FieldMetaData("attIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntGraphG_args.class, metaDataMap);
    }

    public getEntGraphG_args() {
    }

    public getEntGraphG_args(
      java.lang.String keyword,
      java.lang.String attIds,
      java.lang.String level,
      java.lang.String nodeType)
    {
      this();
      this.keyword = keyword;
      this.attIds = attIds;
      this.level = level;
      this.nodeType = nodeType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntGraphG_args(getEntGraphG_args other) {
      if (other.isSetKeyword()) {
        this.keyword = other.keyword;
      }
      if (other.isSetAttIds()) {
        this.attIds = other.attIds;
      }
      if (other.isSetLevel()) {
        this.level = other.level;
      }
      if (other.isSetNodeType()) {
        this.nodeType = other.nodeType;
      }
    }

    public getEntGraphG_args deepCopy() {
      return new getEntGraphG_args(this);
    }

    @Override
    public void clear() {
      this.keyword = null;
      this.attIds = null;
      this.level = null;
      this.nodeType = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getKeyword() {
      return this.keyword;
    }

    public getEntGraphG_args setKeyword(@org.apache.thrift.annotation.Nullable java.lang.String keyword) {
      this.keyword = keyword;
      return this;
    }

    public void unsetKeyword() {
      this.keyword = null;
    }

    /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyword() {
      return this.keyword != null;
    }

    public void setKeywordIsSet(boolean value) {
      if (!value) {
        this.keyword = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAttIds() {
      return this.attIds;
    }

    public getEntGraphG_args setAttIds(@org.apache.thrift.annotation.Nullable java.lang.String attIds) {
      this.attIds = attIds;
      return this;
    }

    public void unsetAttIds() {
      this.attIds = null;
    }

    /** Returns true if field attIds is set (has been assigned a value) and false otherwise */
    public boolean isSetAttIds() {
      return this.attIds != null;
    }

    public void setAttIdsIsSet(boolean value) {
      if (!value) {
        this.attIds = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLevel() {
      return this.level;
    }

    public getEntGraphG_args setLevel(@org.apache.thrift.annotation.Nullable java.lang.String level) {
      this.level = level;
      return this;
    }

    public void unsetLevel() {
      this.level = null;
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
      return this.level != null;
    }

    public void setLevelIsSet(boolean value) {
      if (!value) {
        this.level = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getNodeType() {
      return this.nodeType;
    }

    public getEntGraphG_args setNodeType(@org.apache.thrift.annotation.Nullable java.lang.String nodeType) {
      this.nodeType = nodeType;
      return this;
    }

    public void unsetNodeType() {
      this.nodeType = null;
    }

    /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeType() {
      return this.nodeType != null;
    }

    public void setNodeTypeIsSet(boolean value) {
      if (!value) {
        this.nodeType = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case KEYWORD:
        if (value == null) {
          unsetKeyword();
        } else {
          setKeyword((java.lang.String)value);
        }
        break;

      case ATT_IDS:
        if (value == null) {
          unsetAttIds();
        } else {
          setAttIds((java.lang.String)value);
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((java.lang.String)value);
        }
        break;

      case NODE_TYPE:
        if (value == null) {
          unsetNodeType();
        } else {
          setNodeType((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYWORD:
        return getKeyword();

      case ATT_IDS:
        return getAttIds();

      case LEVEL:
        return getLevel();

      case NODE_TYPE:
        return getNodeType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case KEYWORD:
        return isSetKeyword();
      case ATT_IDS:
        return isSetAttIds();
      case LEVEL:
        return isSetLevel();
      case NODE_TYPE:
        return isSetNodeType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntGraphG_args)
        return this.equals((getEntGraphG_args)that);
      return false;
    }

    public boolean equals(getEntGraphG_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_keyword = true && this.isSetKeyword();
      boolean that_present_keyword = true && that.isSetKeyword();
      if (this_present_keyword || that_present_keyword) {
        if (!(this_present_keyword && that_present_keyword))
          return false;
        if (!this.keyword.equals(that.keyword))
          return false;
      }

      boolean this_present_attIds = true && this.isSetAttIds();
      boolean that_present_attIds = true && that.isSetAttIds();
      if (this_present_attIds || that_present_attIds) {
        if (!(this_present_attIds && that_present_attIds))
          return false;
        if (!this.attIds.equals(that.attIds))
          return false;
      }

      boolean this_present_level = true && this.isSetLevel();
      boolean that_present_level = true && that.isSetLevel();
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (!this.level.equals(that.level))
          return false;
      }

      boolean this_present_nodeType = true && this.isSetNodeType();
      boolean that_present_nodeType = true && that.isSetNodeType();
      if (this_present_nodeType || that_present_nodeType) {
        if (!(this_present_nodeType && that_present_nodeType))
          return false;
        if (!this.nodeType.equals(that.nodeType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetKeyword()) ? 131071 : 524287);
      if (isSetKeyword())
        hashCode = hashCode * 8191 + keyword.hashCode();

      hashCode = hashCode * 8191 + ((isSetAttIds()) ? 131071 : 524287);
      if (isSetAttIds())
        hashCode = hashCode * 8191 + attIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetLevel()) ? 131071 : 524287);
      if (isSetLevel())
        hashCode = hashCode * 8191 + level.hashCode();

      hashCode = hashCode * 8191 + ((isSetNodeType()) ? 131071 : 524287);
      if (isSetNodeType())
        hashCode = hashCode * 8191 + nodeType.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEntGraphG_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAttIds()).compareTo(other.isSetAttIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attIds, other.attIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeType()).compareTo(other.isSetNodeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, other.nodeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEntGraphG_args(");
      boolean first = true;

      sb.append("keyword:");
      if (this.keyword == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attIds:");
      if (this.attIds == null) {
        sb.append("null");
      } else {
        sb.append(this.attIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("level:");
      if (this.level == null) {
        sb.append("null");
      } else {
        sb.append(this.level);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeType:");
      if (this.nodeType == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntGraphG_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntGraphG_argsStandardScheme getScheme() {
        return new getEntGraphG_argsStandardScheme();
      }
    }

    private static class getEntGraphG_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEntGraphG_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntGraphG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyword = iprot.readString();
                struct.setKeywordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attIds = iprot.readString();
                struct.setAttIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.level = iprot.readString();
                struct.setLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NODE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeType = iprot.readString();
                struct.setNodeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntGraphG_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyword != null) {
          oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
          oprot.writeString(struct.keyword);
          oprot.writeFieldEnd();
        }
        if (struct.attIds != null) {
          oprot.writeFieldBegin(ATT_IDS_FIELD_DESC);
          oprot.writeString(struct.attIds);
          oprot.writeFieldEnd();
        }
        if (struct.level != null) {
          oprot.writeFieldBegin(LEVEL_FIELD_DESC);
          oprot.writeString(struct.level);
          oprot.writeFieldEnd();
        }
        if (struct.nodeType != null) {
          oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
          oprot.writeString(struct.nodeType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntGraphG_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntGraphG_argsTupleScheme getScheme() {
        return new getEntGraphG_argsTupleScheme();
      }
    }

    private static class getEntGraphG_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEntGraphG_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntGraphG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetKeyword()) {
          optionals.set(0);
        }
        if (struct.isSetAttIds()) {
          optionals.set(1);
        }
        if (struct.isSetLevel()) {
          optionals.set(2);
        }
        if (struct.isSetNodeType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKeyword()) {
          oprot.writeString(struct.keyword);
        }
        if (struct.isSetAttIds()) {
          oprot.writeString(struct.attIds);
        }
        if (struct.isSetLevel()) {
          oprot.writeString(struct.level);
        }
        if (struct.isSetNodeType()) {
          oprot.writeString(struct.nodeType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntGraphG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.keyword = iprot.readString();
          struct.setKeywordIsSet(true);
        }
        if (incoming.get(1)) {
          struct.attIds = iprot.readString();
          struct.setAttIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.level = iprot.readString();
          struct.setLevelIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nodeType = iprot.readString();
          struct.setNodeTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEntGraphG_result implements org.apache.thrift.TBase<getEntGraphG_result, getEntGraphG_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntGraphG_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntGraphG_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEntGraphG_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEntGraphG_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable AuditException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuditException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntGraphG_result.class, metaDataMap);
    }

    public getEntGraphG_result() {
    }

    public getEntGraphG_result(
      java.lang.String success,
      AuditException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntGraphG_result(getEntGraphG_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new AuditException(other.e);
      }
    }

    public getEntGraphG_result deepCopy() {
      return new getEntGraphG_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getEntGraphG_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public AuditException getE() {
      return this.e;
    }

    public getEntGraphG_result setE(@org.apache.thrift.annotation.Nullable AuditException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((AuditException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntGraphG_result)
        return this.equals((getEntGraphG_result)that);
      return false;
    }

    public boolean equals(getEntGraphG_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEntGraphG_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEntGraphG_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntGraphG_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntGraphG_resultStandardScheme getScheme() {
        return new getEntGraphG_resultStandardScheme();
      }
    }

    private static class getEntGraphG_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEntGraphG_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntGraphG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new AuditException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntGraphG_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntGraphG_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntGraphG_resultTupleScheme getScheme() {
        return new getEntGraphG_resultTupleScheme();
      }
    }

    private static class getEntGraphG_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEntGraphG_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntGraphG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntGraphG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new AuditException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEntsRelevanceSeekGraphG_args implements org.apache.thrift.TBase<getEntsRelevanceSeekGraphG_args, getEntsRelevanceSeekGraphG_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntsRelevanceSeekGraphG_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntsRelevanceSeekGraphG_args");

    private static final org.apache.thrift.protocol.TField ENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("entName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("attIds", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEntsRelevanceSeekGraphG_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEntsRelevanceSeekGraphG_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String entName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String attIds; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String level; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENT_NAME((short)1, "entName"),
      ATT_IDS((short)2, "attIds"),
      LEVEL((short)3, "level");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENT_NAME
            return ENT_NAME;
          case 2: // ATT_IDS
            return ATT_IDS;
          case 3: // LEVEL
            return LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("entName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATT_IDS, new org.apache.thrift.meta_data.FieldMetaData("attIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntsRelevanceSeekGraphG_args.class, metaDataMap);
    }

    public getEntsRelevanceSeekGraphG_args() {
    }

    public getEntsRelevanceSeekGraphG_args(
      java.lang.String entName,
      java.lang.String attIds,
      java.lang.String level)
    {
      this();
      this.entName = entName;
      this.attIds = attIds;
      this.level = level;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntsRelevanceSeekGraphG_args(getEntsRelevanceSeekGraphG_args other) {
      if (other.isSetEntName()) {
        this.entName = other.entName;
      }
      if (other.isSetAttIds()) {
        this.attIds = other.attIds;
      }
      if (other.isSetLevel()) {
        this.level = other.level;
      }
    }

    public getEntsRelevanceSeekGraphG_args deepCopy() {
      return new getEntsRelevanceSeekGraphG_args(this);
    }

    @Override
    public void clear() {
      this.entName = null;
      this.attIds = null;
      this.level = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEntName() {
      return this.entName;
    }

    public getEntsRelevanceSeekGraphG_args setEntName(@org.apache.thrift.annotation.Nullable java.lang.String entName) {
      this.entName = entName;
      return this;
    }

    public void unsetEntName() {
      this.entName = null;
    }

    /** Returns true if field entName is set (has been assigned a value) and false otherwise */
    public boolean isSetEntName() {
      return this.entName != null;
    }

    public void setEntNameIsSet(boolean value) {
      if (!value) {
        this.entName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAttIds() {
      return this.attIds;
    }

    public getEntsRelevanceSeekGraphG_args setAttIds(@org.apache.thrift.annotation.Nullable java.lang.String attIds) {
      this.attIds = attIds;
      return this;
    }

    public void unsetAttIds() {
      this.attIds = null;
    }

    /** Returns true if field attIds is set (has been assigned a value) and false otherwise */
    public boolean isSetAttIds() {
      return this.attIds != null;
    }

    public void setAttIdsIsSet(boolean value) {
      if (!value) {
        this.attIds = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLevel() {
      return this.level;
    }

    public getEntsRelevanceSeekGraphG_args setLevel(@org.apache.thrift.annotation.Nullable java.lang.String level) {
      this.level = level;
      return this;
    }

    public void unsetLevel() {
      this.level = null;
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
      return this.level != null;
    }

    public void setLevelIsSet(boolean value) {
      if (!value) {
        this.level = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ENT_NAME:
        if (value == null) {
          unsetEntName();
        } else {
          setEntName((java.lang.String)value);
        }
        break;

      case ATT_IDS:
        if (value == null) {
          unsetAttIds();
        } else {
          setAttIds((java.lang.String)value);
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ENT_NAME:
        return getEntName();

      case ATT_IDS:
        return getAttIds();

      case LEVEL:
        return getLevel();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ENT_NAME:
        return isSetEntName();
      case ATT_IDS:
        return isSetAttIds();
      case LEVEL:
        return isSetLevel();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntsRelevanceSeekGraphG_args)
        return this.equals((getEntsRelevanceSeekGraphG_args)that);
      return false;
    }

    public boolean equals(getEntsRelevanceSeekGraphG_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_entName = true && this.isSetEntName();
      boolean that_present_entName = true && that.isSetEntName();
      if (this_present_entName || that_present_entName) {
        if (!(this_present_entName && that_present_entName))
          return false;
        if (!this.entName.equals(that.entName))
          return false;
      }

      boolean this_present_attIds = true && this.isSetAttIds();
      boolean that_present_attIds = true && that.isSetAttIds();
      if (this_present_attIds || that_present_attIds) {
        if (!(this_present_attIds && that_present_attIds))
          return false;
        if (!this.attIds.equals(that.attIds))
          return false;
      }

      boolean this_present_level = true && this.isSetLevel();
      boolean that_present_level = true && that.isSetLevel();
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (!this.level.equals(that.level))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEntName()) ? 131071 : 524287);
      if (isSetEntName())
        hashCode = hashCode * 8191 + entName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAttIds()) ? 131071 : 524287);
      if (isSetAttIds())
        hashCode = hashCode * 8191 + attIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetLevel()) ? 131071 : 524287);
      if (isSetLevel())
        hashCode = hashCode * 8191 + level.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEntsRelevanceSeekGraphG_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEntName()).compareTo(other.isSetEntName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entName, other.entName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAttIds()).compareTo(other.isSetAttIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attIds, other.attIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEntsRelevanceSeekGraphG_args(");
      boolean first = true;

      sb.append("entName:");
      if (this.entName == null) {
        sb.append("null");
      } else {
        sb.append(this.entName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attIds:");
      if (this.attIds == null) {
        sb.append("null");
      } else {
        sb.append(this.attIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("level:");
      if (this.level == null) {
        sb.append("null");
      } else {
        sb.append(this.level);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntsRelevanceSeekGraphG_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntsRelevanceSeekGraphG_argsStandardScheme getScheme() {
        return new getEntsRelevanceSeekGraphG_argsStandardScheme();
      }
    }

    private static class getEntsRelevanceSeekGraphG_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEntsRelevanceSeekGraphG_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntsRelevanceSeekGraphG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entName = iprot.readString();
                struct.setEntNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attIds = iprot.readString();
                struct.setAttIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.level = iprot.readString();
                struct.setLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntsRelevanceSeekGraphG_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entName != null) {
          oprot.writeFieldBegin(ENT_NAME_FIELD_DESC);
          oprot.writeString(struct.entName);
          oprot.writeFieldEnd();
        }
        if (struct.attIds != null) {
          oprot.writeFieldBegin(ATT_IDS_FIELD_DESC);
          oprot.writeString(struct.attIds);
          oprot.writeFieldEnd();
        }
        if (struct.level != null) {
          oprot.writeFieldBegin(LEVEL_FIELD_DESC);
          oprot.writeString(struct.level);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntsRelevanceSeekGraphG_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntsRelevanceSeekGraphG_argsTupleScheme getScheme() {
        return new getEntsRelevanceSeekGraphG_argsTupleScheme();
      }
    }

    private static class getEntsRelevanceSeekGraphG_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEntsRelevanceSeekGraphG_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntsRelevanceSeekGraphG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEntName()) {
          optionals.set(0);
        }
        if (struct.isSetAttIds()) {
          optionals.set(1);
        }
        if (struct.isSetLevel()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEntName()) {
          oprot.writeString(struct.entName);
        }
        if (struct.isSetAttIds()) {
          oprot.writeString(struct.attIds);
        }
        if (struct.isSetLevel()) {
          oprot.writeString(struct.level);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntsRelevanceSeekGraphG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.entName = iprot.readString();
          struct.setEntNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.attIds = iprot.readString();
          struct.setAttIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.level = iprot.readString();
          struct.setLevelIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEntsRelevanceSeekGraphG_result implements org.apache.thrift.TBase<getEntsRelevanceSeekGraphG_result, getEntsRelevanceSeekGraphG_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntsRelevanceSeekGraphG_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntsRelevanceSeekGraphG_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEntsRelevanceSeekGraphG_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEntsRelevanceSeekGraphG_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable AuditException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuditException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntsRelevanceSeekGraphG_result.class, metaDataMap);
    }

    public getEntsRelevanceSeekGraphG_result() {
    }

    public getEntsRelevanceSeekGraphG_result(
      java.lang.String success,
      AuditException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntsRelevanceSeekGraphG_result(getEntsRelevanceSeekGraphG_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new AuditException(other.e);
      }
    }

    public getEntsRelevanceSeekGraphG_result deepCopy() {
      return new getEntsRelevanceSeekGraphG_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getEntsRelevanceSeekGraphG_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public AuditException getE() {
      return this.e;
    }

    public getEntsRelevanceSeekGraphG_result setE(@org.apache.thrift.annotation.Nullable AuditException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((AuditException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntsRelevanceSeekGraphG_result)
        return this.equals((getEntsRelevanceSeekGraphG_result)that);
      return false;
    }

    public boolean equals(getEntsRelevanceSeekGraphG_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEntsRelevanceSeekGraphG_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEntsRelevanceSeekGraphG_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntsRelevanceSeekGraphG_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntsRelevanceSeekGraphG_resultStandardScheme getScheme() {
        return new getEntsRelevanceSeekGraphG_resultStandardScheme();
      }
    }

    private static class getEntsRelevanceSeekGraphG_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEntsRelevanceSeekGraphG_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntsRelevanceSeekGraphG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new AuditException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntsRelevanceSeekGraphG_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntsRelevanceSeekGraphG_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEntsRelevanceSeekGraphG_resultTupleScheme getScheme() {
        return new getEntsRelevanceSeekGraphG_resultTupleScheme();
      }
    }

    private static class getEntsRelevanceSeekGraphG_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEntsRelevanceSeekGraphG_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntsRelevanceSeekGraphG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntsRelevanceSeekGraphG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new AuditException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
