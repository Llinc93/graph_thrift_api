#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class AuditException(TException):
    """
    Attributes:
     - why

    """


    def __init__(self, why=None,):
        self.why = why

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.why = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuditException')
        if self.why is not None:
            oprot.writeFieldBegin('why', TType.STRING, 1)
            oprot.writeString(self.why.encode('utf-8') if sys.version_info[0] == 2 else self.why)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.why is None:
            raise TProtocolException(message='Required field why is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EntGraphGParams(object):
    """
    Attributes:
     - keyword
     - attIds
     - level
     - nodeType

    """


    def __init__(self, keyword=None, attIds=None, level=None, nodeType=None,):
        self.keyword = keyword
        self.attIds = attIds
        self.level = level
        self.nodeType = nodeType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.keyword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.attIds = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.level = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.nodeType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EntGraphGParams')
        if self.keyword is not None:
            oprot.writeFieldBegin('keyword', TType.STRING, 1)
            oprot.writeString(self.keyword.encode('utf-8') if sys.version_info[0] == 2 else self.keyword)
            oprot.writeFieldEnd()
        if self.attIds is not None:
            oprot.writeFieldBegin('attIds', TType.STRING, 2)
            oprot.writeString(self.attIds.encode('utf-8') if sys.version_info[0] == 2 else self.attIds)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.STRING, 3)
            oprot.writeString(self.level.encode('utf-8') if sys.version_info[0] == 2 else self.level)
            oprot.writeFieldEnd()
        if self.nodeType is not None:
            oprot.writeFieldBegin('nodeType', TType.STRING, 4)
            oprot.writeString(self.nodeType.encode('utf-8') if sys.version_info[0] == 2 else self.nodeType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EntsRelevanceSeekGraphGParams(object):
    """
    Attributes:
     - entName
     - attIds
     - level

    """


    def __init__(self, entName=None, attIds=None, level=None,):
        self.entName = entName
        self.attIds = attIds
        self.level = level

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.entName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.attIds = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.level = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EntsRelevanceSeekGraphGParams')
        if self.entName is not None:
            oprot.writeFieldBegin('entName', TType.STRING, 1)
            oprot.writeString(self.entName.encode('utf-8') if sys.version_info[0] == 2 else self.entName)
            oprot.writeFieldEnd()
        if self.attIds is not None:
            oprot.writeFieldBegin('attIds', TType.STRING, 2)
            oprot.writeString(self.attIds.encode('utf-8') if sys.version_info[0] == 2 else self.attIds)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.STRING, 3)
            oprot.writeString(self.level.encode('utf-8') if sys.version_info[0] == 2 else self.level)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AuditException)
AuditException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'why', 'UTF8', None, ),  # 1
)
all_structs.append(EntGraphGParams)
EntGraphGParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'keyword', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'attIds', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'level', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'nodeType', 'UTF8', None, ),  # 4
)
all_structs.append(EntsRelevanceSeekGraphGParams)
EntsRelevanceSeekGraphGParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'entName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'attIds', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'level', 'UTF8', None, ),  # 3
)
fix_spec(all_structs)
del all_structs
